m_avg_trip_hr <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = SEPTA_region_map, color = "black", weight = 1, fill = FALSE) %>%
addCircleMarkers(
data = dat_trip_count_hr %>% filter(final_day_type == "Weekday"),
group = ~category,  # Group data based on urban or suburban
lng = ~stop_lon,
lat = ~stop_lat,
color = ~pal(simplified_category_freq),  # Apply the color based on the combined category
radius = 1,
opacity = 0.8,
popup = ~paste0("<b>Stop ID:</b> ", stop_id, "<br>",
"<b>Stop Name:</b> ", stop_name, "<br>",
"<b>Avg Buses/Hr:</b> ", avg_trip_hr, "<br>",
"<b>Max Frequency:</b> ", simplified_freq, "<br>",
"<b>All Routes:</b> ", All_Routes)
)
# Display the map
m_avg_trip_hr
# Create the leaflet map
m_avg_trip_hr <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = SEPTA_region_map, color = "black", weight = 1, fill = FALSE) %>%
addCircleMarkers(
data = dat_trip_count_hr %>% filter(final_day_type == "Weekday"),
group = ~category,  # Group data based on urban or suburban
lng = ~stop_lon,
lat = ~stop_lat,
color = ~pal(simplified_category_freq),  # Apply the color based on the combined category
radius = 1,
opacity = 0.8,
popup = ~paste0("<b>Stop ID:</b> ", stop_id, "<br>",
"<b>Stop Name:</b> ", stop_name, "<br>",
"<b>Avg Buses/Hr:</b> ", avg_trip_hr, "<br>",
"<b>Max Frequency:</b> ", simplified_freq, "<br>",
"<b>All Routes:</b> ", All_Routes)
)  %>%
addLayersControl(
overlayGroups = c("urban", "suburban"),
options = layersControlOptions(collapsed = FALSE)
)
# Display the map
m_avg_trip_hr
# Creating a combined category for coloring purposes
dat_trip_count_hr$simplified_category_freq <- with(dat_trip_count_hr, paste(category, simplified_freq, sep = ", "))
# Create the color palette function
pal <- colorFactor(colors, domain = dat_trip_count_hr$simplified_category_freq)
# Create the leaflet map
m_avg_trip_hr <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = SEPTA_region_map, color = "black", weight = 1, fill = FALSE) %>%
addCircleMarkers(
data = dat_trip_count_hr %>% filter(final_day_type == "Weekday"),
group = ~category,  # Group data based on urban or suburban
lng = ~stop_lon,
lat = ~stop_lat,
color = ~pal(simplified_category_freq),  # Apply the color based on the combined category
radius = 1,
opacity = 0.8,
popup = ~paste0("<b>Stop ID:</b> ", stop_id, "<br>",
"<b>Stop Name:</b> ", stop_name, "<br>",
"<b>Avg Buses/Hr:</b> ", avg_trip_hr, "<br>",
"<b>Max Frequency:</b> ", simplified_freq, "<br>",
"<b>All Routes:</b> ", All_Routes)
)  %>%
addLayersControl(
overlayGroups = c("urban", "suburban"),
options = layersControlOptions(collapsed = FALSE)
)
# Display the map
m_avg_trip_hr
# Ensure labels match exactly in color definitions and data manipulation
colors <- c("urban, 15 minutes or less" = "darkred",
"urban, more than 15 minutes" = "navy",
"suburban, 15 minutes or less" = "lightcoral",
"suburban, more than 15 minutes" = "lightblue")
# Update the combined category creation in your data frame
dat_trip_count_hr$simplified_category_freq <- with(dat_trip_count_hr, paste(tolower(category), simplified_freq, sep = ", "))
# Create the color palette function using the adjusted labels
pal <- colorFactor(colors, domain = dat_trip_count_hr$simplified_category_freq)
# Create the leaflet map
m_avg_trip_hr <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = SEPTA_region_map, color = "black", weight = 1, fill = FALSE) %>%
addCircleMarkers(
data = dat_trip_count_hr %>% filter(final_day_type == "Weekday"),
group = ~category,  # Group data based on urban or suburban
lng = ~stop_lon,
lat = ~stop_lat,
color = ~pal(simplified_category_freq),  # Apply the color based on the combined category
radius = 1,
opacity = 0.8,
popup = ~paste0("<b>Stop ID:</b> ", stop_id, "<br>",
"<b>Stop Name:</b> ", stop_name, "<br>",
"<b>Avg Buses/Hr:</b> ", avg_trip_hr, "<br>",
"<b>Max Frequency:</b> ", simplified_freq, "<br>",
"<b>All Routes:</b> ", All_Routes)
)  %>%
addLayersControl(
overlayGroups = c("urban", "suburban"),
options = layersControlOptions(collapsed = FALSE)
)
# Display the map
m_avg_trip_hr
# Ensure labels match exactly in color definitions and data manipulation
colors <- c("urban, 15 minutes or less" = "darkred",
"urban, More than 15 minutes" = "navy",
"suburban, 15 minutes or less" = "lightcoral",
"suburban, More than 15 minutes" = "lightblue")
# Update the combined category creation in your data frame
dat_trip_count_hr$simplified_category_freq <- with(dat_trip_count_hr, paste(tolower(category), simplified_freq, sep = ", "))
# Create the color palette function using the adjusted labels
pal <- colorFactor(colors, domain = dat_trip_count_hr$simplified_category_freq)
# Create the leaflet map
m_avg_trip_hr <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = SEPTA_region_map, color = "black", weight = 1, fill = FALSE) %>%
addCircleMarkers(
data = dat_trip_count_hr %>% filter(final_day_type == "Weekday"),
group = ~category,  # Group data based on urban or suburban
lng = ~stop_lon,
lat = ~stop_lat,
color = ~pal(simplified_category_freq),  # Apply the color based on the combined category
radius = 1,
opacity = 0.8,
popup = ~paste0("<b>Stop ID:</b> ", stop_id, "<br>",
"<b>Stop Name:</b> ", stop_name, "<br>",
"<b>Avg Buses/Hr:</b> ", avg_trip_hr, "<br>",
"<b>Max Frequency:</b> ", simplified_freq, "<br>",
"<b>All Routes:</b> ", All_Routes)
)  %>%
addLayersControl(
overlayGroups = c("urban", "suburban"),
options = layersControlOptions(collapsed = FALSE)
)
# Display the map
m_avg_trip_hr
# Define color palette for simplified frequency
pal <- colorFactor(c("red", "blue"), domain = c("15 minutes or less", "More than 15 minutes"))
# Create the leaflet map
m_avg_trip_hr <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = SEPTA_region_map, color = "black", weight = 1, fill = FALSE) %>%
addCircleMarkers(
data = dat_trip_count_hr %>% filter(final_day_type == "Weekday" & !is.na(category)),
group = ~category,  # Group data based on urban or suburban
lng = ~stop_lon,
lat = ~stop_lat,
color = ~pal(simplified_freq),  # Color based on simplified frequency
radius = 1,
opacity = 0.8,
popup = ~paste0("<b>Stop ID:</b> ", stop_id, "<br>",
"<b>Stop Name:</b> ", stop_name, "<br>",
"<b>Avg Buses/Hr:</b> ", avg_trip_hr, "<br>",
"<b>Max Frequency:</b> ", simplified_freq, "<br>",
"<b>All Routes:</b> ", All_Routes)
) %>%
addLegend(pal = pal, values = ~simplified_freq, title = "Max Frequency",
position = "bottomright")
# Define color palette for simplified frequency
pal <- colorFactor(c("red", "blue"), domain = c("15 minutes or less", "More than 15 minutes"))
# Create the leaflet map
m_avg_trip_hr <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = SEPTA_region_map, color = "black", weight = 1, fill = FALSE) %>%
addCircleMarkers(
data = dat_trip_count_hr %>% filter(final_day_type == "Weekday" & !is.na(category)),
group = ~category,  # Group data based on urban or suburban
lng = ~stop_lon,
lat = ~stop_lat,
color = ~pal(simplified_freq),  # Color based on simplified frequency
radius = 1,
opacity = 0.8,
popup = ~paste0("<b>Stop ID:</b> ", stop_id, "<br>",
"<b>Stop Name:</b> ", stop_name, "<br>",
"<b>Avg Buses/Hr:</b> ", avg_trip_hr, "<br>",
"<b>Max Frequency:</b> ", simplified_freq, "<br>",
"<b>All Routes:</b> ", All_Routes)
) %>%
addLayersControl(
overlayGroups = c("urban", "suburban"),
options = layersControlOptions(collapsed = FALSE)
)
# Display the map
m_avg_trip_hr
# Define color palette for simplified frequency
pal <- colorFactor(c("darkred", "navy"), domain = c("15 minutes or less", "More than 15 minutes"))
# Create the leaflet map
m_avg_trip_hr <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = SEPTA_region_map, color = "black", weight = 1, fill = FALSE) %>%
addCircleMarkers(
data = dat_trip_count_hr %>% filter(final_day_type == "Weekday" & !is.na(category)),
group = ~category,  # Group data based on urban or suburban
lng = ~stop_lon,
lat = ~stop_lat,
color = ~pal(simplified_freq),  # Color based on simplified frequency
radius = 1,
opacity = 0.8,
popup = ~paste0("<b>Stop ID:</b> ", stop_id, "<br>",
"<b>Stop Name:</b> ", stop_name, "<br>",
"<b>Avg Buses/Hr:</b> ", avg_trip_hr, "<br>",
"<b>Max Frequency:</b> ", simplified_freq, "<br>",
"<b>All Routes:</b> ", All_Routes)
) %>%
addLayersControl(
overlayGroups = c("urban", "suburban"),
options = layersControlOptions(collapsed = FALSE)
)
# Display the map
m_avg_trip_hr
brewerplot <- function (palette) {
p + scale_fill_brewer(palette = palette) + opts(title=palette)
}
brewerplot ("Set1")
brewerplot <- function (palette) {
p + scale_fill_brewer(palette = palette) + opts(title=palette)
}
brewerplot ("Set1")
knitr::opts_chunk$set(echo = TRUE, cache = FALSE)
library(tidyverse)
library(sf)
library(tidytransit)
library(lubridate)
library(hms)
library(tidyr)
library(patchwork)
library(kableExtra)
library(wk)
library(leaflet)
library(leaflet.extras)
library(viridis)
library(viridisLite)
library(htmlwidgets)
library(htmltools)
library(leaflet.extras)
library(forcats)
library(ggplot2)
library(scales)
library(shiny)
library(webshot2)
library(magick)
library(plotly)
library(readr)
# Define the color codes
bus_revolution_colors <- c("#A6123A", "#655BA6", "#26A699", "#F2AE2E", "#F2E5D5")
# Create a custom palette function
bus_revolution_palette <- function(n) {
colorRampPalette(bus_revolution_colors)(n)
}
workdir <- "~/OneDrive - PennO365/03_UNIVERSITY_OF_PENNSYLVANIA-MCP_2025/04_FALL_24/03_MUSA_6951_Communication_in_Urban_Spatial_Analytics/MUSA-6310_Assignment-2/MUSA-6310_Assignment-2" # Change the directory
setwd(workdir)
# Define color palette for simplified frequency using the bus revolution colors
pal <- colorFactor(c("#A6123A", "#655BA6"), domain = c("15 minutes or less", "More than 15 minutes"))
# Create the leaflet map
m_avg_trip_hr <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = SEPTA_region_map, color = "black", weight = 1, fill = FALSE) %>%
addCircleMarkers(
data = dat_trip_count_hr %>% filter(final_day_type == "Weekday" & !is.na(category)),
group = ~category,  # Group data based on urban or suburban
lng = ~stop_lon,
lat = ~stop_lat,
color = ~pal(simplified_freq),  # Color based on simplified frequency
radius = 1,
opacity = 0.8,
popup = ~paste0("<b>Stop ID:</b> ", stop_id, "<br>",
"<b>Stop Name:</b> ", stop_name, "<br>",
"<b>Avg Buses/Hr:</b> ", avg_trip_hr, "<br>",
"<b>Max Frequency:</b> ", simplified_freq, "<br>",
"<b>All Routes:</b> ", All_Routes)
) %>%
addLayersControl(
overlayGroups = c("urban", "suburban"),
options = layersControlOptions(collapsed = FALSE)
)
knitr::opts_chunk$set(echo = TRUE, cache = FALSE)
library(tidyverse)
library(sf)
library(tidytransit)
library(lubridate)
library(hms)
library(tidyr)
library(patchwork)
library(kableExtra)
library(wk)
library(leaflet)
library(leaflet.extras)
library(viridis)
library(viridisLite)
library(htmlwidgets)
library(htmltools)
library(leaflet.extras)
library(forcats)
library(ggplot2)
library(scales)
library(shiny)
library(webshot2)
library(magick)
library(plotly)
library(readr)
# Define the color codes
bus_revolution_colors <- c("#A6123A", "#655BA6", "#26A699", "#F2AE2E", "#F2E5D5")
# Create a custom palette function
bus_revolution_palette <- function(n) {
colorRampPalette(bus_revolution_colors)(n)
}
workdir <- "~/OneDrive - PennO365/03_UNIVERSITY_OF_PENNSYLVANIA-MCP_2025/04_FALL_24/03_MUSA_6951_Communication_in_Urban_Spatial_Analytics/MUSA-6310_Assignment-2/MUSA-6310_Assignment-2" # Change the directory
setwd(workdir)
# Import GTFS data
stops <- read.csv("data/google_bus/stops.txt", header = TRUE, sep = ",")
stop_times <- read.csv("data/google_bus/stop_times.txt", header = TRUE, sep = ",")
trips <- read.csv("data/google_bus/trips.txt", header = TRUE, sep = ",")
shapes <- read.csv("data/google_bus/shapes.txt", header = TRUE, sep = ",")
routes <- read.csv("data/google_bus/routes.txt", header = TRUE, sep = ",")
calendar <- read.csv("data/google_bus/calendar.txt", header = TRUE, sep = ",")
calendar_dates <- read.csv("data/google_bus/calendar_dates.txt", header = TRUE, sep = ",")
# Import Swiftly data
swiftly <- st_read("data/SwiftlyShapes/geoJSONs/SEPTASurface_HighResSpeed_v2.json")
# Join stop_times and trips, from now on dat will be our main data set
dat <- left_join(stop_times, trips, by = "trip_id")
# join dat and routes
dat <- left_join(dat, routes, by = "route_id")
#determine route_type
dat <- dat %>%
mutate(mode = if_else(route_type == 0, "Trolley", ifelse(route_type == 1, "Metro", ifelse(route_type == 3, "Bus", "Trolleybus"))))
# Mode share (not ridership)
dat_trip_by_mode <- dat %>%
group_by(mode) %>%
summarise(mode_count = n(), .groups = 'drop') %>%
mutate(total_count = sum(mode_count),
mode_share = round(mode_count/sum(mode_count)*100, digits = 2)) %>%
ungroup()
# # Plot mode share using ggplot2 and the custom palette
ggplot(dat_trip_by_mode, aes(x = mode, y = mode_share, fill = mode)) +
geom_bar(stat = "identity", width = 0.75) +
scale_fill_manual(values = bus_revolution_palette(length(unique(dat_trip_by_mode$mode)))) +
geom_text(aes(label = paste0(mode_share, "% (", mode_count, " trips)")),
vjust = -0.5, color = "black", size = 2.5) +
labs(title = "Mode Share by Transit Type",
x = "Mode",
y = "Mode Share (%)",
fill = "Mode") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5))
#
# # total trip bus & trolley bus 1.980.505, total observations 2.026.677
#
# ggplot() +
#   # Add service period background rectangles with reduced alpha for subtlety
#   geom_rect(data = service_periods, aes(xmin = start_hour, xmax = end_hour, ymin = 0, ymax = max(hourly_trips$number_of_trips), fill = peak_category), alpha = 0.2) +
#   # Add the line plot for weekday trips with adjusted point sizes
#   geom_line(data = hourly_trips %>% filter(final_day_type == "Weekday"), aes(x = hour, y = number_of_trips), color = "#F2AE2E", size = 1) +
#   geom_point(data = hourly_trips %>% filter(final_day_type == "Weekday"), aes(x = hour, y = number_of_trips), color = "#26A699", size = 3) +
#   # Add the line plot for weekend trips with a new color for better differentiation
#   geom_line(data = hourly_trips %>% filter(final_day_type == "Weekend"), aes(x = hour, y = number_of_trips), color = "#0072B2", size = 1) +
#   geom_point(data = hourly_trips %>% filter(final_day_type == "Weekend"), aes(x = hour, y = number_of_trips), color = "#D55E00", size = 3) +
#   # Define scales and labels with appropriate adjustments
#   scale_x_continuous(breaks = 0:23) +
#   scale_y_continuous(labels = scales::comma) +
#   scale_fill_manual(values = service_period_colors) +
#   scale_color_manual(values = c("Weekday" = "#F2AE2E", "Weekend" = "#0072B2")) +
#   labs(title = "Number of Trips by Hour with Service Periods",
#        x = "Hour of Day",
#        y = "Number of Trips",
#        fill = "Service Period",
#        color = "Day Type") +
#   theme_minimal() +
#   theme(legend.position = "bottom",
#         plot.title = element_text(hjust = 0.5))
str(dat_trip_by_mode)
# CREATE LINE GRAPH OF TRIPS BY SERVICE PERIODS
# Function to normalize times greater than 24:00:00. Important step: check the stop_times$arrival_time and departure_time values if it's greater than 24:00
normalize_time <- function(time_str) {
time_parts <- strsplit(time_str, ":")[[1]]
hours <- as.numeric(time_parts[1])
minutes <- as.numeric(time_parts[2])
seconds <- as.numeric(time_parts[3])
if (hours >= 24) {
hours <- hours - 24
time_str <- sprintf("%02d:%02d:%02d", hours, minutes, seconds)
}
return(time_str)
}
#identify peak_pm category
dat <- dat %>%
mutate(departure_time = sapply(departure_time, normalize_time), # departure_time's normalized
departure_time = lubridate::hms(departure_time),
hour = hour(departure_time),  # Extract hour component for easier condition checking
peak_category = if_else(hour >= 4 & hour < 6, "Early Morning",
if_else(hour >= 6 & hour < 9, "AM Peak",
if_else(hour >= 9 & hour < 15, "Mid Day",
if_else(hour >= 15 & hour < 18, "PM Peak",
if_else(hour >= 18 & hour < 22, "Evening",
ifelse(hour >= 22 & hour < 24, "Late Night", "Owl")))))))
# # Check if there are any NA values in the 'departure_time' column
# summarise(dat,
#     na_count = sum(is.na(departure_time)), #Count NA values
#     total_rows = n(),  # Total number of rows for context
#     percentage_na = na_count / total_rows * 100  # Percentage of NA values
#   )
durations <- c("Owl" = 4, "Early Morning" = 2, "AM Peak" = 3, "Mid Day" = 6, "PM Peak" = 3, "Evening" = 4, "Late Night" = 2)
dat_service_period <- dat %>%
filter(mode %in% c("Bus", "Trolleybus", "Trolley")) %>%
group_by(peak_category)%>%
summarise(peak_count = n(), .groups = 'drop') %>%
mutate(total_count = sum(peak_count),
peak_share = round(peak_count/sum(peak_count)*100, digits = 2)) %>%
arrange(factor(peak_category, levels = c("Owl", "Early Morning", "AM Peak", "Mid Day", "PM Peak", "Evening", "Late Night"))) %>%
ungroup()
# Create a data frame for service periods
service_periods <- data.frame(
peak_category = c("Owl", "Early Morning", "AM Peak", "Mid Day", "PM Peak", "Evening", "Late Night"),
start_hour = c(0, 4, 6, 9, 15, 18, 22),
end_hour = c(4, 6, 9, 15, 18, 22, 24)
)
# CREATE BAR CHART OF TRIPS BY SERVICE TYPES
# Ensure 'calendar' has 'day_type' defined
calendar <- calendar %>%
mutate(
day_type = case_when(
monday == 1 & tuesday == 1 & wednesday == 1 & thursday == 1 & friday == 1 & saturday == 0 & sunday == 0 ~ "Weekday",
(saturday == 1 | sunday == 1) ~ "Weekend",
TRUE ~ "irregular"
)
)
# Calendar_dates includes 'service_id', 'date', and 'exception_type'
# Ensure 'calendar_dates' has 'day_type' defined based on the date
calendar_dates <- calendar_dates %>%
filter(exception_type == 1) %>% #we only need exception_type == 1, those added to the service
mutate(
date = ymd(date),  # Convert date format if necessary
day_of_week = wday(date, label = TRUE, week_start = 1),
day_type = case_when(
day_of_week %in% c("Mon", "Tue", "Wed", "Thu", "Fri") ~ "Weekday",  # Monday to Friday
TRUE ~ "Weekend"  # Saturday and Sunday
)
)
# Join calendar_dates with calendar
calendar_joined <- calendar_dates %>%
full_join(calendar, by = "service_id", suffix = c(".dates", ".cal")) %>%
mutate(
final_day_type = case_when(
# Use calendar_dates' day_type if exception_type indicates added service
exception_type == 1 & day_type.dates == "Weekday" ~ "Weekday",
exception_type == 1 & day_type.dates == "Weekend" ~ "Weekend",
# Default to calendar's day_type where there's no specific exception noted
TRUE ~ day_type.cal
)
) %>%
select(service_id, final_day_type) %>%
group_by(service_id, final_day_type) %>%
summarise(count = n(), .groups = 'drop') %>%
arrange(service_id, desc(count)) %>%
distinct(service_id, .keep_all = TRUE) %>% # Make sure no double day types for service ID
select(-count)
dat <- dat %>%
left_join(calendar_joined, by = "service_id")
dat_service_type <- dat %>%
filter(mode %in% c("Bus", "Trolleybus", "Trolley")) %>%
group_by(final_day_type)%>%
summarise(day_type_count = n(), .groups = 'drop') %>%
mutate(total_count = sum(day_type_count),
peak_share = round(day_type_count/sum(day_type_count)*100, digits = 2)) %>%
arrange(factor(final_day_type, levels = c("Weekday", "Weekend"))) %>%
ungroup()
# Summarize data to get the number of trips per hour
hourly_trips <- dat %>%
filter(mode %in% c("Bus", "Trolleybus", "Trolley")) %>%
group_by(hour, final_day_type) %>%
summarise(number_of_trips = n())
# Define a custom palette for the service periods
service_period_colors <- c(
"Owl" = "#E5E5E5",
"Early Morning" = "#C5E0B4",
"AM Peak" = "#A9D08E",
"Mid Day" = "#FFD966",
"PM Peak" = "#F4B084",
"Evening" = "#D5A6BD",
"Late Night" = "#A4C2F4"
)
# # Plot the combined graph
# ggplot() +
#   # Add service period background rectangles
#   geom_rect(data = service_periods, aes(xmin = start_hour, xmax = end_hour, ymin = 0, ymax = max(hourly_trips$number_of_trips), fill = peak_category), alpha = 0.3) +
#   # Add the line plot for weekday trips
#   geom_line(data = hourly_trips %>% filter(final_day_type == "Weekday"), aes(x = hour, y = number_of_trips), color = "#F2AE2E", size = 1) +
#   geom_point(data = hourly_trips %>% filter(final_day_type == "Weekday"), aes(x = hour, y = number_of_trips), color = "#26A699", size = 2) +
#   # Add the line plot for weekend trips
#   geom_line(data = hourly_trips %>% filter(final_day_type == "Weekend"), aes(x = hour, y = number_of_trips), color = "#A6123A", size = 1) +
#   geom_point(data = hourly_trips %>% filter(final_day_type == "Weekend"), aes(x = hour, y = number_of_trips), color = "#26A699", size = 2) +
#   # Define scales and labels
#   scale_x_continuous(breaks = 0:23) +
#   scale_y_continuous(labels = comma) +
#   scale_fill_manual(values = service_period_colors) +
#   scale_color_manual(values = c("Weekday" = "#F2AE2E",
#                                 "Weekend" = "#A6123A")) +
#   labs(title = "Number of Trips by Hour with Service Periods",
#        x = "Hour of Day",
#        y = "Number of Trips",
#        fill = "Service Period",
#        color = "Day Type") +
#   theme_minimal() +
#   theme(legend.position = "bottom",
#         plot.title = element_text(hjust = 0.5))
# SET UP STOPS CATEGORY. This step is crucial as we'll use stops information and join them for each kind of maps
# Convert stops data to sf object
stops <- stops %>%
st_as_sf(coords = c("stop_lon", "stop_lat"), crs = 4326, remove = FALSE)
# Load PA and SEPTA region map for base map
PA <- st_read("data/PaCounty2024_05.geojson")
